* e_d hold time of lant1v0x05, 0.13um, Berkeley generic bsim3 params
* lant1v0x05_e_d.cir 2007-07-09:11h15 graham
* FLOW
* instantiate one subckt
* for each clock transition from 20p to 1500p (4 in all)
*   for each data transition from 20p to 1500p (4 in all)
*     for each d-in and z-out combination (4 in all)
*       until the timing increment has been reduced to 0.1ps
*         start with tH=409.6ps and increase (if fail) or decrease (if pass)
*       assign hold time to output vector
* print output vectors (4x4) to screen and file
*
*    output_file=3   output_file=4
*    _1_lh           _0_hl
*    _______                 _____
* d         \_____   _______/
*    ______          ______
* e        \______         \______
*             ____   ________
* z  ________/               \____
*
.include ../../../magic/subckt/vsclib013/spice_model.lib
.include ../../../magic/subckt/vsclib013/lant1v0x05.spi
.include ../../../magic/subckt/vsclib013/params.inc
*
x0  d_0  e_0  vdd0 vss0  x0z  lant1v0x05
*
cx0z  x0z  0 10.80f
* 
vdd0 vdd0 0 'vdd'
vss0 0 vss0 'vss'
*
Ve_0 e_0 0 dc 0 pwl(0 0 100p 0 )
Vd_0 d_0 0 dc 0 pwl(0 0 100p 0 )
*

.control
  set width=136 height=500 numdgt=3 noprintscale nobreak noaskquit=1

  set measure_point = 1500p
  set max_timing_err = 2p
  set max_timing_perc = 0.02
  set input_threshold_rise = 0.5
  set input_threshold_fall = 0.5
  set output_threshold_rise = 0.5
  set output_threshold_fall = 0.5
  set e_v1 = $vdd
  set e_v2 = $vss

  let thoh1[15] = 0
  let thol1[15] = 0
  let n = 0
  foreach tran_e 20p 200p 670p 1500p
    let intran[n] = $tran_e
    let e_lo = $measure_point -$tran_e /2
    let e_hi = $measure_point +$tran_e /2
    set e_input = ( 0 $e_v1 "$&e_lo" $e_v1 "$&e_hi" $e_v2 )
    let j = 0
    foreach tran_d 20p 200p 670p 1500p
      foreach output_file 3 4
        if $output_file = 3
          set d_v1 = $vdd
          set d_v2 = $vdd
          set d_v3 = $vss
          set inthresh = $input_threshold_rise
          set z_v1 = $vdd
          set z_v2 = $vdd
          set outhresh = $output_threshold_fall
          set outfall = 1
        end
        if $output_file = 4
          set d_v1 = $vss
          set d_v2 = $vss
          set d_v3 = $vdd
          set inthresh = $input_threshold_fall
          set z_v1 = $vss
          set z_v2 = $vss
          set outhresh = $output_threshold_rise
          set outfall = -1
        end
        set functional = 1
        let count = 0
        set max_ho = 0
        foreach ho 409.6p 409.6p 204.8p 102.4p 51.2p 25.6p 12.8p 6.4p 3.2p 1.6p 0.8p 0.4p 0.2p 0.1p 0.1p 0.1p 0.1p
          let count = count + 1
          if count = 1
            let hold = $ho
          else
            if $functional = 1
              let hold = hold - $ho
            else
              let hold = hold + $ho
            end
          end
          let hold100x = hold * 1E12
          if $max_ho < $ho
            set max_ho = $ho
          end
          let d_lo = $measure_point +hold -$tran_d *$inthresh
          let d_hi = $measure_point +hold +$tran_d *$inthresh
          if $output_file = 3
            let tP = d_lo + $input_threshold_fall * $tran_d
          end
          if $output_file = 4
            let tP = d_lo + $input_threshold_rise * $tran_d
          end
          if d_lo < 0
            echo # !? Error: hold time is less than -$measure_point ps
            break
          end
          set d_input = ( 0 $d_v1 100p $d_v2 "$&d_lo" $d_v2 "$&d_hi" $d_v3 )
          set tstop = 3000p
          alter @Vd_0[pwl] = [ $d_input ]
          alter @Ve_0[pwl] =[ $e_input ]
          tran $tstep $tstop
          linearize
*          plot v(e_0) v(d_0) v(x0:n1) v(x0:n2) v(x0z)

          let tint = length(time)-1
*          let simtime = time[tint]
          let simpoints = length(time)-1
*
*         Check whether output switched or not
*
          let output_v = x0z[tint]
          if $z_v2 lt $vdd *$outhresh and output_v gt $vdd *$outhresh
            set functional = 0
          else
            if $z_v2 gt $vdd *$outhresh and output_v lt $vdd *$outhresh
              set functional = 0
            else
              set functional = 1
            end
          end

*         Output should not switch from late input change
*          echo "n= $&n ,j= $&j ,tran_e= $tran_e ,tran_d= $tran_d"
          echo "Trying tH $&hold100x ps"

          if $functional = 1 and $ho = 0.1p
            break
          end
        end *foreach ho
*        plot v(e_0) v(d_0) v(x0:n1) v(x0:n2) v(x0z)
        if $output_file = 4
          let thoh1[4*j+n] = hold
*          print hold
        end
        if $output_file = 3
          let thol1[4*j+n] = hold
*          print hold
        end
        destroy all
      end *foreach output_file
      let j = j + 1
    end *foreach tran_d
    let n = n + 1
  end *foreach tran_e
  print col intran thoh1[0,3] thoh1[4,7] thoh1[8,11] thoh1[12,15]
  print col intran thoh1[0,3] thoh1[4,7] thoh1[8,11] thoh1[12,15] > lant1v0x05_e_d_1_lh.delay
  print col intran thol1[0,3] thol1[4,7] thol1[8,11] thol1[12,15]
  print col intran thol1[0,3] thol1[4,7] thol1[8,11] thol1[12,15] > lant1v0x05_e_d_0_hl.delay
  rusage trantime
.endc
.end
