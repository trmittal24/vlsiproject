* b2_z transition of oai23av0x05, 0.13um, Berkeley generic bsim3 params
* oai23av0x05_b2_z.cir 2007-02-10:10h31 graham
* FLOW
* instantiate one subckt for each load cap to be measured
* for each input to output transition (two, LH and HL)
*   for each input transition (10 here)
*     measure time where Vin crosses VDD*input_threshold (tP)
*     for each subckt with its different load
*       meaasure time between tP and where Vout crosses VDD*output_threshold
*       measure the output slope between VDD*slope_lo and VDD*slope_h and scale to full swing value
*     measure input current for each input transition and convert to capacitance
*     calculate Prop Ramp delays for each input transition from x1, x2 and x3 (normal load cap values)
*     average the power caused by the 2 transitions for each subckt (except one with largest load)
*         and subtract the load power
*   average input pin capacitance over transitions 60ps to 450ps (likeliest transitions)
*   write Prop-Ramp info in VBE file format for Alliance tools
*   write table of delays for each of the 6 load caps and 10 transitions (6x10 LUT)
*   write table of transition times for each of the 6 load caps and 10 transitions (6x10 LUT)
* write power LUT for each of 5 load caps and 10 transitions (5x10 LUT)
*
.include ../../../magic/subckt/vsclib013/spice_model.lib
.include ../../../magic/subckt/vsclib013/oai23av0x05.spi
.include ../../../magic/subckt/vsclib013/params.inc
*
x0  a3_0  b1_0  b2_0  vdd  vss   x0z   oai23av0x05
x1  a3_1  b1_1  b2_1  vdd1 vss1  x1z  oai23av0x05
x2  a3_2  b1_2  b2_2  vdd2 vss2  x2z  oai23av0x05
x3  a3_3  b1_3  b2_3  vdd3 vss3  x3z  oai23av0x05
x4  a3_4  b1_4  b2_4  vdd4 vss4  x4z  oai23av0x05
x5  a3_5  b1_5  b2_5  vdd5 vss5  x5z  oai23av0x05
*
cx0z  x0z  0 0
cx1z  x1z  0 0
cx2z  x2z  0 0
cx3z  x3z  0 0
cx4z  x4z  0 0
cx5z  x5z  0 0
* 
vdd  vdd  0 'vdd'
vdd1 vdd1 0 'vdd'
vdd2 vdd2 0 'vdd'
vdd3 vdd3 0 'vdd'
vdd4 vdd4 0 'vdd'
vdd5 vdd5 0 'vdd'
vss  0 vss  'vss'
vss1 0 vss1 'vss'
vss2 0 vss2 'vss'
vss3 0 vss3 'vss'
vss4 0 vss4 'vss'
vss5 0 vss5 'vss'
*
Vref ref 0 dc 0 pwl(0 0 100p 0 )
cref ref 0 100f
Va3_0 a3_0 0 dc 0 pwl(0 0 100p 0 )
Va3_1 a3_1 0 dc 0 pwl(0 0 100p 0 )
Va3_2 a3_2 0 dc 0 pwl(0 0 100p 0 )
Va3_3 a3_3 0 dc 0 pwl(0 0 100p 0 )
Va3_4 a3_4 0 dc 0 pwl(0 0 100p 0 )
Va3_5 a3_5 0 dc 0 pwl(0 0 100p 0 )
Vb1_0 b1_0 0 dc 0 pwl(0 0 100p 0 )
Vb1_1 b1_1 0 dc 0 pwl(0 0 100p 0 )
Vb1_2 b1_2 0 dc 0 pwl(0 0 100p 0 )
Vb1_3 b1_3 0 dc 0 pwl(0 0 100p 0 )
Vb1_4 b1_4 0 dc 0 pwl(0 0 100p 0 )
Vb1_5 b1_5 0 dc 0 pwl(0 0 100p 0 )
Vb2_0 b2_0 0 dc 0 pwl(0 0 100p 0 )
Vb2_1 b2_1 0 dc 0 pwl(0 0 100p 0 )
Vb2_2 b2_2 0 dc 0 pwl(0 0 100p 0 )
Vb2_3 b2_3 0 dc 0 pwl(0 0 100p 0 )
Vb2_4 b2_4 0 dc 0 pwl(0 0 100p 0 )
Vb2_5 b2_5 0 dc 0 pwl(0 0 100p 0 )
*

.control
  set width=136 height=500 numdgt=3 noprintscale nobreak noaskquit=1

  set unitcap=1.5f
  set loadcap0=1
  set loadcap1=4
  set loadcap2=12
  set loadcap3=30
  set loadcap4=62
  set loadcap5=130
  set drive_strength = 0.5
  set input_threshold_rise = 0.5
  set input_threshold_fall = 0.5
  set output_threshold_rise = 0.5
  set output_threshold_fall = 0.5
  set lower_lh = 0.080
  set upper_lh = 0.920
  set lower_hl = 0.080
  set upper_hl = 0.920
  set lower_hh = 0.100
  set upper_hh = 0.900
  set lower_ll = 0.100
  set upper_ll = 0.900

  foreach n 0 1 2 3 4 5 6 7 8 9
    let pvdd0[ $n ] = 0
    let pvdd1[ $n ] = 0
    let pvdd2[ $n ] = 0
    let pvdd3[ $n ] = 0
    let pvdd4[ $n ] = 0
  end
  alter cx0z = $loadcap0 *$unitcap *$drive_strength
  alter cx1z = $loadcap1 *$unitcap *$drive_strength
  alter cx2z = $loadcap2 *$unitcap *$drive_strength
  alter cx3z = $loadcap3 *$unitcap *$drive_strength
  alter cx4z = $loadcap4 *$unitcap *$drive_strength
  alter cx5z = $loadcap5 *$unitcap *$drive_strength
  let sumx =  @cx1z[capacitance] + @cx2z[capacitance] + @cx3z[capacitance] + @cx4z[capacitance]
  let sumx2 = @cx1z[capacitance]^2 + @cx2z[capacitance]^2 + @cx3z[capacitance]^2 + @cx4z[capacitance]^2
  let in_cap = 0
  let ave_cap[1] = 0
  let tPlh_z = 0
  let tPhl_z = 0
  let tPhh_z = 0
  let tPll_z = 0
  let rup_z = 0
  let rdown_z = 0
  let simulation_no = 0
  let pwr_simulation_no = 0
  foreach timing_sense 1
    if $timing_sense=-1
      set power_type=n
    end
    if $timing_sense=1
      set power_type=p
    end
    if $timing_sense=0
      set power_type=u
    end
    foreach output_file 2
      let num_pin_states = 0
      if $timing_sense < 0
        let pin_state[0]=0
        let pin_state[1]=2
        let pin_state[2]=-1
        let pin_state[3]=-1
        let pin_state[4]=-1
        let pin_state[5]=-1
        let pin_state[6]=-1
        let pin_state[7]=-1
        if ( pin_state[ 0 ] = -1 )
          echo "# ? Cell has timing_sense negative_unate but other pin states have not been set."
        end
      end
      if $timing_sense > 0
        let pin_state[0]=1
        let pin_state[1]=-1
        let pin_state[2]=-1
        let pin_state[3]=-1
        let pin_state[4]=-1
        let pin_state[5]=-1
        let pin_state[6]=-1
        let pin_state[7]=-1
        if ( pin_state[ 0 ] = -1 )
          echo "# ? Cell has timing_sense positive_unate but other pin states have not been set."
        end
      end
      if $timing_sense = 0
        let pin_state[0]=1
        let pin_state[1]=-1
        let pin_state[2]=-1
        let pin_state[3]=-1
        let pin_state[4]=-1
        let pin_state[5]=-1
        let pin_state[6]=-1
        let pin_state[7]=-1
        if ( pin_state[ 0 ] = -1 )
          echo "# ? Cell has pin_power condition, but other pin states have not been set."
        end
      end
      let pin_state_index = 0
      while pin_state_index <= 7
        if ( pin_state[ pin_state_index ] = 0 )
          set other_pin_state=00
        else
          if ( pin_state[ pin_state_index ] = 1 )
            set other_pin_state=01
          else
            if ( pin_state[ pin_state_index ] = 2 )
              set other_pin_state=10
            else
              if ( pin_state[ pin_state_index ] = 3 )
                set other_pin_state=11
              end
            end
          end
        end
        if ( pin_state[ pin_state_index ] < 0 )
          set other_pin_state=-1
        else
          if $timing_sense = 0
            let pwr_simulation_no = pwr_simulation_no + 1
          else
            let simulation_no = simulation_no + 1
          end
          let num_pin_states = num_pin_states + 1
          let tPROP[0] = 0
          let tRAMP[0] = 0
          let step[0] = 0
          let prop_z[1] = 0
          let ramp_z[1] = 0
          if $output_file = 1
            set outfall = -1
            set outhresh=$output_threshold_rise
            set tstop = 4000p
            if $timing_sense <= 0
              set slope1 = $lower_lh
              set slope2 = $upper_lh
              set infall = 1
              set b2_v1 = $vdd
              set b2_v2 = $vss
              set inthresh = $input_threshold_fall
            else
              if $timing_sense > 0
                set slope1 = $lower_hh
                set slope2 = $upper_hh
                set infall = -1
                set b2_v1 = $vss
                set b2_v2 = $vdd
                set inthresh = $input_threshold_rise
              else
                echo "# Timing sense must be positive_unate or negative_unate and isn't. Try again."
                break
              end
            end
          end
          if $output_file = 2
            set outfall = 1
            set outhresh=$output_threshold_fall
            set tstop = 4000p
            if $timing_sense <= 0
              set slope1 = $upper_hl
              set slope2 = $lower_hl
              set infall = -1
              set b2_v1 = $vss
              set b2_v2 = $vdd
              set inthresh = $input_threshold_rise
            else
              if $timing_sense > 0
                set slope1 = $upper_ll
                set slope2 = $lower_ll
                set infall = 1
                set b2_v1 = $vdd
                set b2_v2 = $vss
                set inthresh = $input_threshold_fall
              else
                echo "# Timing sense must be positive_unate or negative_unate and isn't. Try again."
                break
              end
            end
          end
          if pin_state[ pin_state_index ] = 0
            set a3_v1 = $vss
            set a3_v2 = $vss
            set b1_v1 = $vss
            set b1_v2 = $vss
            set tstop = 4000p
          else
            if pin_state[ pin_state_index ] = 1
              set a3_v1 = $vss
              set a3_v2 = $vss
              set b1_v1 = $vdd
              set b1_v2 = $vdd
            else
              if pin_state[ pin_state_index ] = 2
                set a3_v1 = $vdd
                set a3_v2 = $vdd
                set b1_v1 = $vss
                set b1_v2 = $vss
              else
                if pin_state[ pin_state_index ] = 3
                  set a3_v1 = $vdd
                  set a3_v2 = $vdd
                  set b1_v1 = $vdd
                  set b1_v2 = $vdd
                end
              end
            end
          end
          let n = 0
*          foreach transition 20p 60p 90p 130p 200p 300p 450p 670p 1000p 1500p
          foreach transition 60p
            let intran[n] = $transition
            alter @Vref[pwl] =[ 0 $vdd $transition $vss ]
            alter @Va3_0[pwl] =[ 0 $a3_v1 $transition $a3_v2 ]
            alter @Va3_1[pwl] =[ 0 $a3_v1 $transition $a3_v2 ]
            alter @Va3_2[pwl] =[ 0 $a3_v1 $transition $a3_v2 ]
            alter @Va3_3[pwl] =[ 0 $a3_v1 $transition $a3_v2 ]
            alter @Va3_4[pwl] =[ 0 $a3_v1 $transition $a3_v2 ]
            alter @Va3_5[pwl] =[ 0 $a3_v1 $transition $a3_v2 ]
            alter @Vb1_0[pwl] =[ 0 $b1_v1 $transition $b1_v2 ]
            alter @Vb1_1[pwl] =[ 0 $b1_v1 $transition $b1_v2 ]
            alter @Vb1_2[pwl] =[ 0 $b1_v1 $transition $b1_v2 ]
            alter @Vb1_3[pwl] =[ 0 $b1_v1 $transition $b1_v2 ]
            alter @Vb1_4[pwl] =[ 0 $b1_v1 $transition $b1_v2 ]
            alter @Vb1_5[pwl] =[ 0 $b1_v1 $transition $b1_v2 ]
            alter @Vb2_0[pwl] =[ 0 $b2_v1 $transition $b2_v2 ]
            alter @Vb2_1[pwl] =[ 0 $b2_v1 $transition $b2_v2 ]
            alter @Vb2_2[pwl] =[ 0 $b2_v1 $transition $b2_v2 ]
            alter @Vb2_3[pwl] =[ 0 $b2_v1 $transition $b2_v2 ]
            alter @Vb2_4[pwl] =[ 0 $b2_v1 $transition $b2_v2 ]
            alter @Vb2_5[pwl] =[ 0 $b2_v1 $transition $b2_v2 ]
            tran $tstep 400p
            linearize
            let simtime = time[length(time)-1]
            plot v(b2_0) v(x0z) v(x1z) v(x2z) v(x3z) v(x4z) v(x5z)
            if ( $timing_sense < 0 | $timing_sense > 0 )
              let simpoints = length(time)-1
*
*             set tP, the point where the input waveform crosses its threshold
*
              if $infall = 1
                let tP = ( 1 - $inthresh ) * $transition
              else
                let tP = $inthresh * $transition
              end
*
*             measure delay from tP to the nets x0z-x5z
*
              let j = 0
              while j <= 0
                let m = simpoints/2
                let k = 2
                repeat 16
                  let k = k * 2
                  if j=0
                    let lower_v = x0z[m-1]
                    let upper_v = x0z[m]
                  end
                  if j=1
                    let lower_v = x1z[m-1]
                    let upper_v = x1z[m]
                  end
                  if j=2
                    let lower_v = x2z[m-1]
                    let upper_v = x2z[m]
                  end
                  if j=3
                    let lower_v = x3z[m-1]
                    let upper_v = x3z[m]
                  end
                  if j=4
                    let lower_v = x4z[m-1]
                    let upper_v = x4z[m]
                  end
                  if j=5
                    let lower_v = x5z[m-1]
                    let upper_v = x5z[m]
                  end

                  if $outfall * ( upper_v - $vdd*$outhresh ) <= 0
                    if $outfall * ( lower_v - $vdd*$outhresh ) <= 0
                    let m = length ( vector ( m - simpoints / k )) + 1
                    else
                      goto found_m
                    end
                  else
                    let m = length ( vector ( m + simpoints / k ))
                    if m >= simpoints
                      goto notfound_m
                    end
                  end
                end *repeat 16
                label notfound_m
                echo #Error: Failed to find output threshold ... setting m=simpoints/2
                echo #Error: Failed to find output threshold ... setting m=simpoints/2 >> oai23av0x05_b2.error
                let m = length ( vector ( m - simpoints / 2 )) + 1
                label found_m
                let prop_m = m-1+($vdd*$outhresh -lower_v)/(upper_v -lower_v)
                let tPROP[10*j+n] = time[m-1]+($vdd*$outhresh -lower_v)/(upper_v -lower_v)*(time[m]-time[m-1])-tP
                let step[10*j+n] = m
*
*               find when the waveform passes the first slope threshold
*
                let k = 0
                let first_m = prop_m
                if m > first_m
                  let out_slope1 = m
                else
                  let out_slope1 = m + 1
                end

                repeat 16
                  let k = k + 1
                  if j=0
                    let lower_v = x0z[out_slope1-1]
                    let upper_v = x0z[out_slope1]
                  end
                  if j=1
                    let lower_v = x1z[out_slope1-1]
                    let upper_v = x1z[out_slope1]
                  end
                  if j=2
                    let lower_v = x2z[out_slope1-1]
                    let upper_v = x2z[out_slope1]
                  end
                  if j=3
                    let lower_v = x3z[out_slope1-1]
                    let upper_v = x3z[out_slope1]
                  end
                  if j=4
                    let lower_v = x4z[out_slope1-1]
                    let upper_v = x4z[out_slope1]
                  end
                  if j=5
                    let lower_v = x5z[out_slope1-1]
                    let upper_v = x5z[out_slope1]
                  end

                  if upper_v <= $slope1*$vdd
                    let first_m = out_slope1 + ( $slope1*$vdd - upper_v ) / ( upper_v - lower_v )
                    if lower_v >= $slope1*$vdd
                      goto slope_1
                    end
                  else
                    let first_m = out_slope1 - 1 + ( $slope1*$vdd - lower_v ) / ( upper_v - lower_v )
                  end
                  let out_slope1 = length ( vector ( first_m )) + 1

                  if k = 1
                    let guess_first_m = first_m
                    let guess_out_slope1 = out_slope1
                  end
                end *repeat 16
                echo #Error: Failed to find first slope threshold ... setting first_m from slope at tPROP
                echo #Error: Failed to find first slope threshold ... setting first_m from slope at tPROP >> oai23av0x05_b2.error
                let first_m = guess_first_m
                let out_slope1 = guess_out_slope1
                label slope_1
*
*               find when the waveform passes the second slope threshold
*
                let k = 0
                if m < prop_m
                  let out_slope2 = m
                else
                  let out_slope2 = m - 1
                end

                repeat 16
                  let k = k + 1
                  if j=0
                    let lower_v = x0z[out_slope2]
                    let upper_v = x0z[out_slope2+1]
                  end
                  if j=1
                    let lower_v = x1z[out_slope2]
                    let upper_v = x1z[out_slope2+1]
                  end
                  if j=2
                    let lower_v = x2z[out_slope2]
                    let upper_v = x2z[out_slope2+1]
                  end
                  if j=3
                    let lower_v = x3z[out_slope2]
                    let upper_v = x3z[out_slope2+1]
                  end
                  if j=4
                    let lower_v = x4z[out_slope2]
                    let upper_v = x4z[out_slope2+1]
                  end
                  if j=5
                    let lower_v = x5z[out_slope2]
                    let upper_v = x5z[out_slope2+1]
                  end

                  if lower_v >= $slope2*$vdd
                    let second_m = out_slope2 + ( $slope2*$vdd - lower_v ) / ( upper_v - lower_v )
                    if upper_v <= $slope2*$vdd
                      goto slope_2
                    end
                  else
                    let second_m = out_slope2 + 1 + ( $slope2*$vdd - upper_v ) / ( upper_v - lower_v )
                  end
                  let out_slope2 = length ( vector ( second_m ))

                  if k = 1
                    let guess_second_m = second_m
                    let guess_out_slope2 = out_slope2
                  end
                end *repeat 16
                echo #Error: Failed to find second slope threshold ... setting second_m from slope at tPROP
                echo #Error: Failed to find second slope threshold ... setting second_m from slope at tPROP >> oai23av0x05_b2.error
                let second_m = guess_second_m
                let out_slope2 = guess_out_slope2
                label slope_2

                let out_slope = second_m - first_m
                let tRAMP[10*j+n] = abs ( out_slope / ( $slope1 - $slope2 ))
                let j = j+1
              end *while j <= 5
*
*             Consider current flowing into input pin during input transition time
*
              let trantime = pos(vref#branch)
              if $infall=1
                let in_current = trantime * ( vb2_1#branch + vb2_2#branch + vb2_3#branch )
              else
                let in_current = -trantime * ( vb2_1#branch + vb2_2#branch + vb2_3#branch )
              end
              let ave_cap[n] = mean(in_current) * simtime / $vdd / 3
*
*             Calculate Prop and Ramp delays using all load caps
*             between the second and fourth using the method of least squares
*
              let sumxy = @cx1z[capacitance]*tPROP[10+n]+@cx2z[capacitance]*tPROP[20+n]+@cx3z[capacitance]*tPROP[30+n]+@cx4z[capacitance]*tPROP[40+n]
              let sumy = tPROP[10+n] + tPROP[20+n] + tPROP[30+n] + tPROP[40+n]
              let ramp_z[n] = (4*sumxy-sumx*sumy)/(4*sumx2-sumx^2)
              let prop_z[n]= (sumy*sumx2-sumx*sumxy)/(4*sumx2-sumx^2)
              let pvdd0[n] = (( -mean(vdd#branch) -mean(vss#branch))*$tstop /$vdd - $loadcap0 *$unitcap *$drive_strength )*$vdd *$vdd /simulation_no + pvdd0[n] *( simulation_no -1)/simulation_no
              let pvdd1[n] = (( -mean(vdd1#branch) -mean(vss1#branch))*$tstop /$vdd - $loadcap1 *$unitcap *$drive_strength )*$vdd *$vdd /simulation_no + pvdd1[n] *( simulation_no -1)/simulation_no
              let pvdd2[n] = (( -mean(vdd2#branch) -mean(vss2#branch))*$tstop /$vdd - $loadcap2 *$unitcap *$drive_strength )*$vdd *$vdd /simulation_no + pvdd2[n] *( simulation_no -1)/simulation_no
              let pvdd3[n] = (( -mean(vdd3#branch) -mean(vss3#branch))*$tstop /$vdd - $loadcap3 *$unitcap *$drive_strength )*$vdd *$vdd /simulation_no + pvdd3[n] *( simulation_no -1)/simulation_no
              let pvdd4[n] = (( -mean(vdd4#branch) -mean(vss4#branch))*$tstop /$vdd - $loadcap4 *$unitcap *$drive_strength )*$vdd *$vdd /simulation_no + pvdd4[n] *( simulation_no -1)/simulation_no
            end *if ( $timing_sense < 0 | $timing_sense > 0 )
            if $timing_sense = 0
              let pvdd0[n] = (( -mean(vdd#branch) -mean(vss#branch))*$tstop /$vdd )*$vdd *$vdd /pwr_simulation_no + pvdd0[n] *( pwr_simulation_no -1)/pwr_simulation_no
              let pvdd1[n] = (( -mean(vdd1#branch) -mean(vss1#branch))*$tstop /$vdd )*$vdd *$vdd /pwr_simulation_no + pvdd1[n] *( pwr_simulation_no -1)/pwr_simulation_no
              let pvdd2[n] = (( -mean(vdd2#branch) -mean(vss2#branch))*$tstop /$vdd )*$vdd *$vdd /pwr_simulation_no + pvdd2[n] *( pwr_simulation_no -1)/pwr_simulation_no
              let pvdd3[n] = (( -mean(vdd3#branch) -mean(vss3#branch))*$tstop /$vdd )*$vdd *$vdd /pwr_simulation_no + pvdd3[n] *( pwr_simulation_no -1)/pwr_simulation_no
              let pvdd4[n] = (( -mean(vdd4#branch) -mean(vss4#branch))*$tstop /$vdd )*$vdd *$vdd /pwr_simulation_no + pvdd4[n] *( pwr_simulation_no -1)/pwr_simulation_no
            end
            let n = n + 1
            destroy all
          end *foreach transition
*
*         Only consider caps from the likeliest input transitions ... 3rd to 7th chosen here ... and sims which change the output value
*         in_cap expression changes depending on number of simulations run for this function
*
          let in_cap = in_cap*(simulation_no -1)/(simulation_no ) + ( ave_cap[2]+ave_cap[3]+ave_cap[4]+ave_cap[5]+ave_cap[6] )/5/(simulation_no )
          if $timing_sense < 0
*           For input falling, use transition=130ps for prop-ramp calculation
            if $output_file = 1
              print col intran tPROP[0,9] tPROP[10,19] tPROP[20,29] tPROP[30,39] tPROP[40,49] tPROP[50,59] > oai23av0x05_b2_z_{$other_pin_state}_lh.delay
              print col intran tRAMP[0,9] tRAMP[10,19] tRAMP[20,29] tRAMP[30,39] tRAMP[40,49] tRAMP[50,59] > oai23av0x05_b2_z_{$other_pin_state}_lh.ramp
              print col intran prop_z ramp_z ave_cap > oai23av0x05_b2_z_{$other_pin_state}_lh.vbe
              if $other_pin_state ne -1
                let tPlh_z = (tPlh_z + prop_z[4]) / num_pin_states
                let rup_z = (rup_z + ramp_z[4]) / num_pin_states
                print tPlh_z rup_z in_cap
              end
            end
*           For input rising, use transition=130ps for prop-ramp calculation
            if $output_file = 2
              print col intran tPROP[0,9] tPROP[10,19] tPROP[20,29] tPROP[30,39] tPROP[40,49] tPROP[50,59] > oai23av0x05_b2_z_{$other_pin_state}_hl.delay
              print col intran tRAMP[0,9] tRAMP[10,19] tRAMP[20,29] tRAMP[30,39] tRAMP[40,49] tRAMP[50,59] > oai23av0x05_b2_z_{$other_pin_state}_hl.ramp
              print col intran prop_z ramp_z ave_cap > oai23av0x05_b2_z_{$other_pin_state}_hl.vbe
              if $other_pin_state ne -1
                let tPhl_z = (tPhl_z + prop_z[4]) / num_pin_states
                let rdown_z = (rdown_z + ramp_z[4]) / num_pin_states
                print tPhl_z rdown_z in_cap
              end
            end
          end *$timing_sense < 0
          if $timing_sense > 0
*           For input rising, use transition=130ps for prop-ramp calculation
            if $output_file = 1
              print col intran tPROP[0,9] tPROP[10,19] tPROP[20,29] tPROP[30,39] tPROP[40,49] tPROP[50,59] > oai23av0x05_b2_z_{$other_pin_state}_hh.delay
              print col intran tRAMP[0,9] tRAMP[10,19] tRAMP[20,29] tRAMP[30,39] tRAMP[40,49] tRAMP[50,59] > oai23av0x05_b2_z_{$other_pin_state}_hh.ramp
              print col intran prop_z ramp_z ave_cap > oai23av0x05_b2_z_{$other_pin_state}_hh.vbe
              if $other_pin_state ne -1
                let tPhh_z = (tPhh_z + prop_z[4]) / num_pin_states
                let rup_z = (rup_z + ramp_z[4]) / num_pin_states
                print tPhh_z rup_z in_cap
              end
            end
*           For input falling, use transition=130ps for prop-ramp calculation
            if $output_file = 2
              print col intran tPROP[0,9] tPROP[10,19] tPROP[20,29] tPROP[30,39] tPROP[40,49] tPROP[50,59] > oai23av0x05_b2_z_{$other_pin_state}_ll.delay
              print col intran tRAMP[0,9] tRAMP[10,19] tRAMP[20,29] tRAMP[30,39] tRAMP[40,49] tRAMP[50,59] > oai23av0x05_b2_z_{$other_pin_state}_ll.ramp
              print col intran prop_z ramp_z ave_cap > oai23av0x05_b2_z_{$other_pin_state}_ll.vbe
              if $other_pin_state ne -1
                let tPll_z = (tPll_z + prop_z[4]) / num_pin_states
                let rdown_z = (rdown_z + ramp_z[4]) / num_pin_states
                print tPll_z rdown_z in_cap
              end
            end
          end *$timing_sense > 0
*          plot tPROP[0,9] tPROP[10,19] tPROP[20,29] tPROP[30,39] tPROP[40,49] tPROP[50,59] vs intran
        end *if ( pin_state[ pin_state_index ] < 0 )
        let pin_state_index = pin_state_index + 1
      end *while pin_state_index <= 7
    end *foreach output_file
    print col pvdd0 pvdd1 pvdd2 pvdd3 pvdd4 > oai23av0x05_b2_z_{$power_type}.power
  end *foreach timing_sense
  rusage trantime
.endc
.end
