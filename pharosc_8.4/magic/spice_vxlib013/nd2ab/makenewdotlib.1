#!/bin/bash
# makenewdotlib 2004-08-09:07h41 graham

# reformat the data in the .pr, .pmd, .vbe, ,delay, .ramp and .power files
# into a Synopsys liberty (LIB) format
# usage makenewdotlib fred   will create fred.lib
#
# FLOW
# write the cell.lib header
# for each input pin
#   for each value of timing_sense (negative_unate and/or positive_unate)
#     for each of the states that the other input pins might have
#       check if the largest input transition gives a negative delay
#       for each of the 6 most likely input transitions
#         find the capacitance of the pin
#     write the input pin name and header
#     write the averaged rise, fall and average input pin capacitances
#     write the max_transition for this input based on whether a negative delay was found
# for each output pin (not tested beyond 1 output at the moment)
#   calculate the max_capacitance which is the load giving a worst case max_transition
#   write the output pin name and header incl the calculated max_capacitance
#   for each input pin
#     for each value of timing_sense (negative_unate and/or positive_unate)
#       write the power LUT for this pin and unateness
#       (the power has been averaged in the spice sim over all other pin states)
#   for each input pin
#     for each value of timing_sense (negative_unate and/or positive_unate)
#       for each of the states that the other input pins might have
#          if only 1 other pin state, then write a single timing LUT
#          else if more than 1 other pin state, then write a timing LUT for each state
#               and write a non_unate timing LUT at the end
#
function=$(basename $PWD)

if test $# -eq 0
then
  echo "# Usage ./makenewdotlib cell_name. Please supply cell_name." 1>&2
  exit 1
fi

vbedir=../../../alliance/vbe/vxlib013

# test that all input files exist, otherwise exit
cell=$1

err=0
# check files in local directory
for type in pr pmd vbe delay ramp power
do
  num_args=$(ls -1 "$cell"*."$type" 2>/dev/null | grep -c '^' )
  if [ "$num_args" -eq 0 ]
  then
    echo "# Missing file  "$cell"*."$type"  which is needed to make "$cell".lib." 1>&2
    err=1
  fi
done
if [ "$err" -eq 1 ]
then
  exit 1
fi

drive=${cell##*_?}

transition_9=1000.0
transition_10=1500.0
area=$(cat $vbedir/$cell.vbe | grep area | sed 's/;//' | awk '{print $6/250 }')
tau=$(grep characteristic_delay $cell.pr | awk '{printf"%4.1f\n", $5 }')
pwidth=$(cat $cell.pmd | grep pwidth | awk '{print $2 }')
nwidth=$(cat $cell.pmd | grep nwidth | awk '{print $2 }')
leakage=$(echo $[ ( $pwidth*350 + $nwidth*350 )*55*12/2 ] | awk '{printf "%5.0f\n", $1/10000}')

unitcap=$(grep '^unitcap' "$cell".pmd | tr -s ' ' | sed  's/^unitcap\ //g')
if [ "$unitcap" = "" ]
then
  unitcap=0
fi

if [ "$tau" = "" ]
then
  echo "cell("$cell") {"
else
  echo "cell("$cell") { /* characteristic delay "$tau" ps */"
fi

# flag if single input pin gate
single_pin=-1;
for pin in a b
do
  let single_pin=$single_pin+1
done

echo "area               : "$area" ; /* tracks */"
echo "cell_leakage_power : "$leakage" ; /* "$cell" */"
echo "cell_footprint     : or2 ;"

maxcap=0; neg_delay=0
for pin in a b
do
  cap1=0; cap2=0; j=0
  for out_pin in z
  do
    unate_values=$(grep "^$pin" "$function".pmd | tr -s ' ' | \
      sed "s/^$pin\ //" | grep "^$out_pin" | cut -f2 -d' ' | \
      grep 'unate' | grep -v 'non_unate' | awk '{print $1}' |
    while read line
    do
      echo -e $line" \c"
    done )
    unate_values=$(echo $unate_values | tr -s ' ')

#   repeat once if one timing_sense otherwise twice
    rup=0; rdown=0; also_negative_unate=0
    for timing_sense in $unate_values
    do
#     define timing arcs based on value of timing_sense
      if [ "$timing_sense" = negative_unate ]
      then
        timing_arc1=lh; timing_arc2=hl; also_negative_unate=1
      fi
      if [ "$timing_sense" = positive_unate ]
      then
        timing_arc1=hh; timing_arc2=ll; also_positive_unate=1
      fi

      other_pin_state=$(grep "^$pin" "$function".pmd | tr -s ' ' | sed  "s/^$pin\ //g" | \
        grep "^$out_pin" | sed "s/^$out_pin\ //g" | \
        grep "^$timing_sense" | sed "s/^$timing_sense\ //g" | \
        grep '^when' | sed 's/^when\ //g')
      if [ "$other_pin_state" = "" ]
      then
        other_pin_state=0
      fi

#     get value of other pins when this one is toggled
      for k in $other_pin_state
      do
#       adjust $k if there is only one input
        if [ "$single_pin" -eq 0 ]
        then
          n=
        else
          n="$k"_
        fi
#       check if the largest input transition gives a negative delay
        neg_rise_delay=$(grep '^9' "$cell"_"$pin"_"$out_pin"_"$n$timing_arc1".delay | awk '{printf "%7d\n", $3*1000000000000000 }')
        neg_fall_delay=$(grep '^9' "$cell"_"$pin"_"$out_pin"_"$n$timing_arc2".delay | awk '{printf "%7d\n", $3*1000000000000000 }')
        if [ "$neg_rise_delay" -lt "$neg_delay" ]
        then
          neg_delay=$neg_rise_delay
        fi
        if [ "$neg_fall_delay" -lt "$neg_delay" ]
        then
          neg_delay=$neg_fall_delay
        fi
        lower_rise_transition=$(grep '^0' "$cell"_"$pin"_"$out_pin"_"$n$timing_arc1".ramp | awk '{printf "%7d\n", ($7*100000000000000+5)/10 }')
        upper_rise_transition=$(grep '^0' "$cell"_"$pin"_"$out_pin"_"$n$timing_arc1".ramp | awk '{printf "%7d\n", ($8*100000000000000+5)/10 }')
#       calculate cap as average of the cap measured on the 2nd to 7th transitions
        for i in 1 2 3 4 5 6
        do
          let j=$j+1
#         sum the cap values for each considered input transition and other pin state
          let cap1=$cap1+$[ $(grep "^$i" "$cell"_"$pin"_"$out_pin"_"$n$timing_arc1".vbe | awk '{printf "%5d\n", $5*1000000000000000000 }') ]
          let cap2=$cap2+$[ $(grep "^$i" "$cell"_"$pin"_"$out_pin"_"$n$timing_arc2".vbe | awk '{printf "%5d\n", $5*1000000000000000000 }') ]
        done
      done
#     copy logical effort values from cell.pr and average rise and fall numbers
      if [ "$timing_sense" = negative_unate ]
      then
        le_timing_arc1=$(cat $cell.pr | grep "$pin"_"$out_pin"_"$timing_arc1" | awk '{print $5*1000 }')
        le_timing_arc2=$(cat $cell.pr | grep "$pin"_"$out_pin"_"$timing_arc2" | awk '{print $5*1000 }')
        le=$(echo $[ ( $le_timing_arc1 + $le_timing_arc2 +1 )/2 ] | awk '{printf "%5.2f\n", $1/1000 }')
      fi
    done #for timing_sense in $unate_values
  done #for out_pin in z

  if [ "$also_negative_unate" = 1 ]
  then
    echo "pin("$pin") { /* "$cell" logical effort "$le" */"
  else
    echo "pin("$pin") {"
  fi
  echo "direction          : input ;"
# single cap value is averaged over transitions, states and timing_senses
  echo $[ (10*$cap1+10*$cap2+5)/$j/20 ] | awk '{printf "%18s%6.2f%2s\n", "capacitance        : ", $1/1000, " ;" }'
  echo $[ (10*$cap1+5)/$j/10 ] | awk '{printf "%18s%6.2f%2s\n", "rise_capacitance   : ", $1/1000, " ;" }'
  echo $[ (10*$cap2+5)/$j/10 ] | awk '{printf "%18s%6.2f%2s\n", "fall_capacitance   : ", $1/1000, " ;" }'
  echo "fanout_load        :  1 ;"
# if largest input transition gives negative delay, then limit the allowed max transition on this pin
  if [ "$neg_rise_delay" -lt 0 -o "$neg_fall_delay" -lt 0 ]
  then
    echo "max_transition     : $transition_9 ; /* pin "$pin" of "$cell" */"
  else
    echo "max_transition     : $transition_10 ; /* pin "$pin" of "$cell" */"
  fi

# check if this pin has an internal power component
  if test -f "$cell"_"$pin"_"$out_pin"_u.power
  then
    pinpwr=$(grep '^3' "$cell"_"$pin"_"$out_pin"_u.power | awk '{printf "%7.2f\n", $4*1000000000000000 }' )
    echo "internal_power("$pin") { /* "$cell" "$pinpwr" nW/MHz */"
    echo "power(pwr_intran_x10) {"
    echo -e "values( \" \c"
    for i in 0 1 2 3 4 5 6 7 8 9
    do
      k=0; pinpwr=0
      for j in 2 3 4 5 6
      do
#       sum pin power for this transition across all output loads
        let k=$k+1
        let pinpwr=$pinpwr+$(grep "^$i" "$cell"_"$pin"_"$out_pin"_u.power | awk '{printf "%1d\n", $'$j'*1000000000000000000 }' )
      done
#     take average of pin power and write out
      if [ "$i" -eq 9 ]
      then
        echo $[ (10*$pinpwr+5)/$k/10 ] | awk '{printf"%5.2f%7s\n", $1/2000, "\" ); }}"}'
      else
        echo $[ (10*$pinpwr+5)/$k/10 ] | awk '{printf"%5.2f%2s", $1/2000, ", "}'
      fi
    done
  fi

  echo "}"
done #for pin in a b

for out_pin in z
do
  #
  # ----- This section calculates a value for max_capacitance which either equals the max -----
  # ----- value in the LUT, or the capacitance which gives an output transition equal to  -----
  # -----                    the max input net transition in the LUT                      -----
  #
  # define the library constants: unitcap and max_rise_transition
  if [ "$unitcap" = 0 ]
  then
#   no value in cell.pmd, so use the value coming from technology.pmd
    unitcap=2.6
  fi
  unitcapx10=$(echo $unitcap | awk '{printf "%3d\n", $1*10 }' )

  if [ "${drive:0:1}" -eq 0 ]
  then
    drivex10=${drive:1:1}
  else
    drivex10=$(echo $drive | awk '{printf "%3d\n", $1*10 }' )
  fi
  max_rise_transition=$(echo "20p 60p 90p 130p 200p 300p 450p 670p 1000p 1500p" | awk '{print $10}')
  max_rise_transition=$(echo $[ (${max_rise_transition%*p} *10 ) ] )

  lower_net_cap=$(grep '^total_output_net_capacitance' ../technology.pmd | awk '{printf "%4d\n", $6 }')
  lower_net_cap=$(echo $[ ($lower_net_cap *$drivex10 *$unitcapx10 +5 ) ] )
  upper_net_cap=$(grep '^total_output_net_capacitance' ../technology.pmd | awk '{printf "%4d\n", $7 }')
  upper_net_cap=$(echo $[ ($upper_net_cap *$drivex10 *$unitcapx10 +5 )] )
  lutcap=$(echo $upper_net_cap | awk '{printf "%1d\n", $1/100 }')

  while [ "$lower_rise_transition" -gt "$max_rise_transition" ]
  do
    upper_rise_transition=$lower_rise_transition
    lower_rise_transition=$(grep '^0' "$cell"_"$pin"_"$out_pin"_"$n$timing_arc1".ramp | awk '{printf "%7d\n", ($6*100000000000000+5)/10 }')
    upper_net_cap=$lower_net_cap
    lower_net_cap=$(echo $[ (30 *$drivex10 *$unitcapx10 +5 ) ] )
  done

  if [ "$upper_rise_transition" -gt "$max_rise_transition" ]
  then
    maxcap1=$(echo $[ $lower_net_cap+($max_rise_transition-$lower_rise_transition)*($upper_net_cap-$lower_net_cap)/($upper_rise_transition-$lower_rise_transition)+50 ] )
    if [ "$maxcap" -eq 0 -o "$maxcap" -gt "$maxcap1" ]
    then
      maxcap=$(echo $maxcap1 | awk '{printf "%4d\n", $1/100 }')
    fi
  else
    maxcap=$(echo $upper_net_cap | awk '{printf "%4d\n", $1/100 }')
  fi
  # value of max cap now calculated

  logic_function=$(grep "^$out_pin" "$function".pmd | tr -s ' ' | sed "s/^$out_pin\ //g" | \
    grep '^logic_function' | sed 's/^logic_function\ //g')

  echo "pin("$out_pin") {"
  echo "direction          : output ;"
  echo "min_transition     : 20 ;"
  echo "min_capacitance    : "$(grep min_capacitance "$cell".pmd | sed 's/^min_capacitance[ *]//g')" ;"
  echo "max_capacitance    : "$maxcap" ;"
  echo "max_fanout         : "$(grep max_fanout "$cell".pmd | sed 's/^max_fanout[ *]//g')" ;"
  echo "function           : \""$logic_function"\" ;"

# write out the internal power LUTs for each input pin and timing_sense
  for pin in a b
  do
    unate_values=$(grep "^$pin" "$function".pmd | tr -s ' ' | \
      sed "s/^$pin\ //" | grep "^$out_pin" | cut -f2 -d' ' | \
      grep 'unate' | grep -v 'non_unate' | awk '{print $1}' |
    while read line
    do
      echo -e $line" \c"
    done )
    unate_values=$(echo $unate_values | tr -s ' ')

    for timing_sense in $unate_values
    do
#     identify the name of the file containing the power numbers
      if [ "$timing_sense" = negative_unate ]
      then
        power_name=n
      fi
      if [ "$timing_sense" = positive_unate ]
      then
        power_name=p
      fi
      pinpwr=$(grep '^3' "$cell"_"$pin"_"$out_pin"_"$power_name".power | awk '{printf "%7.2f\n", $4*1000000000000000 }' )
      echo "internal_power("$pin"_"$out_pin"_"$power_name") { /* "$cell" "$pinpwr" nW/MHz */"
      echo "related_pin        : \""$pin"\" ;"

#     check if power already recorded in previous output pin's power LUT
      need_to_subtract=0           
      for pin2 in z
      do
        if [ "$pin2" = "$out_pin" ]
        then
          break
        else
#         get other input pin values for this power measurement
          when=$(grep "^$pin " "$function".pmd | tr -s ' ' | sed "s/^$pin\ //" | \
            grep "^$out_pin " | sed "s/^$out_pin\ //" | \
            grep "^$timing_sense " | sed "s/^$timing_sense\ when\ //")
          prev_when=$(grep "^$pin " "$function".pmd | tr -s ' ' | sed "s/^$pin\ //" | \
            grep "^$pin2 " | sed "s/^$out_pin\ //" | \
            grep "tive_unate " | sed "s/^....tive_unate\ when\ //")
          for other_pins in $when
          do
            for prev_other_pins in $prev_when
            do
              if [ "$other_pins" = "$prev_other_pins" ]
              then
#               this power already measured; mark with variable $need_to_subtract and exit for loop
                need_to_subtract=1
                out_pin2=$pin2
                timing_sense2=$(grep "^$pin " "$function".pmd | tr -s ' ' | sed "s/^$pin\ //" | \
                  grep "^$out_pin2 " | sed "s/^$out_pin2\ //" | awk '{print $1}')
                if [ "$timing_sense2" = negative_unate ]
                then
                  power_name2=n
                elif [ "$timing_sense2" = positive_unate ]
                then
                  power_name2=p
                fi
                break
              fi
            done
            if [ "$need_to_subtract" -eq 1 ]
            then
              break
            fi
          done
        fi
        if [ "$need_to_subtract" -eq 1 ]
        then
          break
        fi
      done #for pin2 in z

#     check if this pin has an internal power component; will be subtracted from in-out power
      for i in 0 1 2 3 4 5 6 7 8 9
      do
        if test -f "$cell"_"$pin"_"$out_pin"_u.power
        then
          k=0; pinpwr1=0
          for j in 2 3 4 5 6
          do
#           sum pin power for this transition across all output loads
            let k=$k+1
            let pinpwr1=$pinpwr1+$(grep "^$i" "$cell"_"$pin"_"$out_pin"_u.power | awk '{printf "%1d\n", $'$j'*1000000000000000000 }' )
          done
#         take average of pin power and express per transition
          let pinpwr1=(10*$pinpwr1+5)/$k/10
        else
          pinpwr1=0
        fi
        if [ "$need_to_subtract" -eq 0 ]
        then
#         can just read values from .power file and write to .lib
          if [ "$i" -eq 0 ]
          then
            echo "power(pwr_x"$drive"_"$lutcap"_5x10) {"
            grep '^0' ${cell}_${pin}_${out_pin}_${power_name}.power | awk '{printf "%9s%7.2f%-2s%7.2f%-2s%7.2f%-2s%7.2f%-2s%7.2f%-4s\n", "values( \"", \
              ($2*1000000000000000000-'$pinpwr1')/2000, ", ", ($3*1000000000000000000-'$pinpwr1')/2000, ", ", ($4*1000000000000000000-'$pinpwr1')/2000, ", ", ($5*1000000000000000000-'$pinpwr1')/2000, ", ", ($6*1000000000000000000-'$pinpwr1')/2000, "\", \\" }'
          elif [ "$i" -gt 0 -a "$i" -lt 9 ]
          then
            grep "^$i" ${cell}_${pin}_${out_pin}_${power_name}.power | awk '{printf "%9s%7.2f%-2s%7.2f%-2s%7.2f%-2s%7.2f%-2s%7.2f%-4s\n", "        \"", \
              ($2*1000000000000000000-'$pinpwr1')/2000, ", ", ($3*1000000000000000000-'$pinpwr1')/2000, ", ", ($4*1000000000000000000-'$pinpwr1')/2000, ", ", ($5*1000000000000000000-'$pinpwr1')/2000, ", ", ($6*1000000000000000000-'$pinpwr1')/2000, "\", \\" }'
          else
            grep '^9' ${cell}_${pin}_${out_pin}_${power_name}.power | awk '{printf "%9s%7.2f%-2s%7.2f%-2s%7.2f%-2s%7.2f%-2s%7.2f%-4s\n", "        \"", \
              ($2*1000000000000000000-'$pinpwr1')/2000, ", ", ($3*1000000000000000000-'$pinpwr1')/2000, ", ", ($4*1000000000000000000-'$pinpwr1')/2000, ", ", ($5*1000000000000000000-'$pinpwr1')/2000, ", ", ($6*1000000000000000000-'$pinpwr1')/2000, "\" ); }}" }'
          fi
        fi #if [ "$need_to_subtract" -eq 0 ]
        if [ "$need_to_subtract" -eq 1 ]
        then
#         need to read other pin power values and subtract from this pin's values
          if [ "$i" -eq 0 ]
          then
            out_power2=$(grep '^0' ${cell}_${pin}_${out_pin2}_${power_name2}.power | awk '{printf"%1d", ($2*10000000000000000000+5)/10}')
            if [ "$out_power2" -lt 0 ]
            then
              out_power2=0
            fi
            echo "power(pwr_x"$drive"_"$lutcap"_5x10) { /* additional power to "$out_pin2" power dissipation */"
            grep '^0' ${cell}_${pin}_${out_pin}_${power_name}.power | awk '{printf "%9s%7.2f%-2s%7.2f%-2s%7.2f%-2s%7.2f%-2s%7.2f%-4s\n", "values( \"", \
              ($2*1000000000000000000-'$pinpwr1'-'$out_power2'<0?0:$2*1000000000000000000-'$pinpwr1'-'$out_power2')/2000, ", ", \
              ($3*1000000000000000000-'$pinpwr1'-'$out_power2'<0?0:$3*1000000000000000000-'$pinpwr1'-'$out_power2')/2000, ", ", \
              ($4*1000000000000000000-'$pinpwr1'-'$out_power2'<0?0:$4*1000000000000000000-'$pinpwr1'-'$out_power2')/2000, ", ", \
              ($5*1000000000000000000-'$pinpwr1'-'$out_power2'<0?0:$5*1000000000000000000-'$pinpwr1'-'$out_power2')/2000, ", ", \
              ($6*1000000000000000000-'$pinpwr1'-'$out_power2'<0?0:$6*1000000000000000000-'$pinpwr1'-'$out_power2')/2000, "\", \\" }'
          elif [ "$i" -gt 0 -a "$i" -lt 9 ]
          then
            grep "^$i" ${cell}_${pin}_${out_pin}_${power_name}.power | awk '{printf "%9s%7.2f%-2s%7.2f%-2s%7.2f%-2s%7.2f%-2s%7.2f%-4s\n", "        \"", \
              ($2*1000000000000000000-'$pinpwr1'-'$out_power2'<0?0:$2*1000000000000000000-'$pinpwr1'-'$out_power2')/2000, ", ", \
              ($3*1000000000000000000-'$pinpwr1'-'$out_power2'<0?0:$3*1000000000000000000-'$pinpwr1'-'$out_power2')/2000, ", ", \
              ($4*1000000000000000000-'$pinpwr1'-'$out_power2'<0?0:$4*1000000000000000000-'$pinpwr1'-'$out_power2')/2000, ", ", \
              ($5*1000000000000000000-'$pinpwr1'-'$out_power2'<0?0:$5*1000000000000000000-'$pinpwr1'-'$out_power2')/2000, ", ", \
              ($6*1000000000000000000-'$pinpwr1'-'$out_power2'<0?0:$6*1000000000000000000-'$pinpwr1'-'$out_power2')/2000, "\", \\" }'
          else
            grep '^9' ${cell}_${pin}_${out_pin}_${power_name}.power | awk '{printf "%9s%7.2f%-2s%7.2f%-2s%7.2f%-2s%7.2f%-2s%7.2f%-4s\n", "        \"", \
              ($2*1000000000000000000-'$pinpwr1'-'$out_power2'<0?0:$2*1000000000000000000-'$pinpwr1'-'$out_power2')/2000, ", ", \
              ($3*1000000000000000000-'$pinpwr1'-'$out_power2'<0?0:$3*1000000000000000000-'$pinpwr1'-'$out_power2')/2000, ", ", \
              ($4*1000000000000000000-'$pinpwr1'-'$out_power2'<0?0:$4*1000000000000000000-'$pinpwr1'-'$out_power2')/2000, ", ", \
              ($5*1000000000000000000-'$pinpwr1'-'$out_power2'<0?0:$5*1000000000000000000-'$pinpwr1'-'$out_power2')/2000, ", ", \
              ($6*1000000000000000000-'$pinpwr1'-'$out_power2'<0?0:$6*1000000000000000000-'$pinpwr1'-'$out_power2')/2000, "\" ); }}" }'
          fi
        fi #if [ "$need_to_subtract" -eq 1 ]
      done #for i in 0 1 2 3 4 5 6 7 8 9
    done #for timing_sense in $unate_values
  done #for pin power LUTs written

# write out the timing LUTs for each input pin
  for pin in a b
  do
    unate_values=$(grep "^$pin" "$function".pmd | tr -s ' ' | \
      sed "s/^$pin\ //" | grep "^$out_pin" | cut -f2 -d' ' | \
      grep 'unate' | grep -v 'non_unate' | awk '{print $1}' |
    while read line
    do
      echo -e $line" \c"
    done )
    unate_values=$(echo $unate_values | tr -s ' ')

    for timing_sense in $unate_values
    do
#     define timing arcs based on value of timing_sense
      if [ "$timing_sense" = negative_unate ]
      then
        timing_arc1=lh; timing_arc2=hl; unateness=n
      fi
      if [ "$timing_sense" = positive_unate ]
      then
        timing_arc1=hh; timing_arc2=ll; unateness=p
      fi

#     get value of other pins when this one is toggled
      other_pin_state=$(grep "^$pin" "$function".pmd | tr -s ' ' | sed  "s/^$pin\ //g" | \
        grep "^$out_pin" | sed "s/^$out_pin\ //g" | \
        grep "^$timing_sense" | sed "s/^$timing_sense\ //g" | \
        grep '^when' | sed 's/^when\ //g')
      if [ "$other_pin_state" = "" ]
      then
        other_pin_state=0
      fi
#     see how many other states there are: more than 1 means adding when and sdf_cond    
      num_states=0
      for k in $other_pin_state
      do
        let num_states=$num_states+1
      done
      if [ "$num_states" -gt 1 ]
      then
#       find the names of the other pins
        j=0
        for pin2 in a b
        do
          if [ "$pin" != "$pin2" ]
          then
            let j=$j+1
            other_pin[$j]=$pin2
          fi
        done
      fi
#     each value of other_pin_state will have its own set of timing
#     must add a dummy state (nu) to handle the non_unate case
      for k in $other_pin_state nu
      do
#       adjust $k if there is only one input
        if [ "$single_pin" -eq 0 ]
        then
          n=
        else
          n="$k"_
        fi
        if [ "$num_states" -eq 1 -a "$k" = nu ]
        then
          continue
        else
          echo "timing() {"
          echo "related_pin        : \""$pin"\" ;"
          if [ "$num_states" -gt 1 -a "$k" != nu ]
          then
#           need to add when and sdf_cond statements
#           convert binary values to true or negated pin names
            pos=0
            while [ "$pos" -lt "$j" ]
            do
              pin_value=${k:pos:1}
              let pos=$pos+1
              if [ "$pin_value" = 0 ]
              then
                pin_name[$pos]=$(echo ${other_pin[$pos]}"'")
              elif [ "$pin_value" = 1 ]
              then
                pin_name[$pos]=${other_pin[$pos]}
              fi
            done
#           when expressions here can handle up to 5 other pins, so a total of 6 input pins
            if [ "$pos" -eq 1 ]
            then
              when_expr=$(echo "("${pin_name[1]}")")
              sdf_cond_expr=$(echo "("${other_pin[1]}" == 1'b"${k:0:1}")")
            elif [ "$pos" -eq 2 ]
            then
              when_expr=$(echo "("${pin_name[1]}"*"${pin_name[2]}")")
              sdf_cond_expr=$(echo "(("${other_pin[1]}" == 1'b"${k:0:1}") && ("${other_pin[2]}" == 1'b"${k:1:1}"))")
            elif [ "$pos" -eq 3 ]
            then
              when_expr=$(echo "("${pin_name[1]}"*"${pin_name[2]}"*"${pin_name[3]}")")
              sdf_cond_expr=$(echo "(("${other_pin[1]}" == 1'b"${k:0:1}") && ("${other_pin[2]}" == 1'b"${k:1:1}") && ("${other_pin[3]}" == 1'b"${k:2:1}"))")
            elif [ "$pos" -eq 4 ]
            then
              when_expr=$(echo "("${pin_name[1]}"*"${pin_name[2]}"*"${pin_name[3]}"*"${pin_name[4]}")")
              sdf_cond_expr=$(echo "(("${other_pin[1]}" == 1'b"${k:0:1}") && ("${other_pin[2]}" == 1'b"${k:1:1}") && ("${other_pin[3]}" == 1'b"${k:2:1}") && ("${other_pin[4]}" == 1'b"${k:3:1}"))")
            elif [ "$pos" -eq 5 ]
            then
              when_expr=$(echo "("${pin_name[1]}"*"${pin_name[2]}"*"${pin_name[3]}"*"${pin_name[4]}"*"${pin_name[5]}")")
              sdf_cond_expr=$(echo "(("${other_pin[1]}" == 1'b"${k:0:1}") && ("${other_pin[2]}" == 1'b"${k:1:1}") && ("${other_pin[3]}" == 1'b"${k:2:1}") && ("${other_pin[4]}" == 1'b"${k:3:1}") && ("${other_pin[5]}" == 1'b"${k:4:1}"))")
            fi
            echo "when               : \""$when_expr"\" ;"
            echo "sdf_cond           : \""$sdf_cond_expr"\" ;"
            echo "timing_sense       : "$timing_sense" ;"
          elif [ "$num_states" -gt 1 -a "$k" = nu ]
          then
#           determine which timing LUT to use for the non_unate case
            non_unate_pin_state=$(grep "^$pin" "$function".pmd | tr -s ' ' | sed  "s/^$pin\ //g" | \
              grep "^$out_pin" | sed "s/^$out_pin\ //g" | \
              grep '^non_unate ' | sed 's/^non_unate\ //g' | \
              grep '^when ' | awk '{print $2 }')
            if [ "$non_unate_pin_state" = "" ]
            then
#             use first state from positive_unate if present
              non_unate_pin_state=$(grep "^$pin" "$function".pmd | tr -s ' ' | sed  "s/^$pin\ //g" | \
                grep "^$out_pin" | sed "s/^$out_pin\ //g" | \
                grep '^positive_unate ' | sed 's/^positive_unate\ //g' | \
                  grep '^when ' | awk '{print $2 }')
            fi
            if [ "$non_unate_pin_state" = "" ]
            then
#             use first state from negative_unate
              non_unate_pin_state=$(grep "^$pin" "$function".pmd | tr -s ' ' | sed  "s/^$pin\ //g" | \
                grep "^$out_pin" | sed "s/^$out_pin\ //g" | \
                grep '^negative_unate ' | sed 's/^negative_unate\ //g' | \
                  grep '^when ' | awk '{print $2 }')
            fi
            if [ "$non_unate_pin_state" = "" ]
            then
              echo "} /* ERROR occurred with non_unate timing. Not written. */" 
              continue
            fi
            k=$non_unate_pin_state; n="$k"_
            echo "timing_sense       : non_unate ;"
          elif [ "$num_states" -eq 1 -a "$k" != nu ]
          then
            echo "timing_sense       : "$timing_sense" ;"
          fi
        fi
        echo "intrinsic_rise     : "$(grep "$pin"_"$out_pin"_"$timing_arc1" "$cell".pr | awk '{print $2 }')" ;"
        echo "intrinsic_fall     : "$(grep "$pin"_"$out_pin"_"$timing_arc2" "$cell".pr | awk '{print $2 }')" ;"
        echo "/* rise_resistance    : "$(grep "$pin"_"$out_pin"_"$timing_arc1" "$cell".pr | awk '{print $3 }')" ; */"
        echo "/* fall_resistance    : "$(grep "$pin"_"$out_pin"_"$timing_arc2" "$cell".pr | awk '{print $3 }')" ; */"
        for transition in $timing_arc1 $timing_arc2
        do
          for extension in delay ramp
          do 
            if [ "$extension" = delay -a "$transition" = "$timing_arc1" ]
            then
              echo "cell_rise(x"$drive"_"$lutcap"_6x10) { /* 50.0% of input to 50.0% of output */"
            elif [ "$extension" = ramp -a "$transition" = "$timing_arc1" ]
            then
              echo "rise_transition(x"$drive"_"$lutcap"_6x10) { /* 15%-85%, scaled to 0%-100% */"
            elif [ "$extension" = delay -a "$transition" = "$timing_arc2" ]
            then
              echo "cell_fall(x"$drive"_"$lutcap"_6x10) { /* 50.0% of input to 50.0% of output */"
            elif [ "$extension" = ramp -a "$transition" = "$timing_arc2" ]
            then
              echo "fall_transition(x"$drive"_"$lutcap"_6x10) { /* 10%-90%, scaled to 0%-100% */"
            fi
            grep '^0' ${cell}_${pin}_${out_pin}_${n}${transition}.${extension} | awk '{printf "%9s%6.1f%-2s%6.1f%-2s%6.1f%-2s%6.1f%-2s%6.1f%-2s%6.1f%-4s\n", "values( \"", \
              $3*1000000000000, ", ", $4*1000000000000, ", ", $5*1000000000000, ", ", $6*1000000000000, ", ", $7*1000000000000, ", ", $8*1000000000000, "\", \\" }'
            for  transition_index in 1 2 3 4 5 6 7 8
            do
              grep "^$transition_index" ${cell}_${pin}_${out_pin}_${n}${transition}.${extension} | awk '{printf "%9s%6.1f%-2s%6.1f%-2s%6.1f%-2s%6.1f%-2s%6.1f%-2s%6.1f%-4s\n", "        \"", \
                $3*1000000000000, ", ", $4*1000000000000, ", ", $5*1000000000000, ", ", $6*1000000000000, ", ", $7*1000000000000, ", ", $8*1000000000000, "\", \\" }'
            done
            grep '^9' ${cell}_${pin}_${out_pin}_${n}${transition}.${extension} | awk '{printf "%9s%6.1f%-2s%6.1f%-2s%6.1f%-2s%6.1f%-2s%6.1f%-2s%6.1f%-4s", "        \"", \
              $3*1000000000000, ", ", $4*1000000000000, ", ", $5*1000000000000, ", ", $6*1000000000000, ", ", $7*1000000000000, ", ", $8*1000000000000, "\" ); }" }'

            if [ "$extension" = ramp -a "$transition" = "$timing_arc2" ]
            then
              echo "}"
            else
              echo
            fi
          done #for extension in delay ramp
        done #for transition in $timing_arc1 $timing_arc2
      done #for k in $other_pin_state
    done #for timing_sense in $unate_values
  done #for pin in a b
  echo "}"
done #for out_pin in z
echo "}"

