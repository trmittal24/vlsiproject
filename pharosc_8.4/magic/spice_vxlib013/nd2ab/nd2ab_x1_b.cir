* b_z transition of nd2ab_x1, 0.13um, Berkeley generic bsim3 params
* nd2ab_x1_b.cir 2004-05-26:00h36 graham
* FLOW
* instantiate one subckt for each load cap to be measured
* for each input to output transition (two, LH and HL)
*   for each input transition (10 here)
*     measure time where Vin crosses VDD*input_threshold (tP)
*     for each subckt with its different load
*       meaasure time between tP and where Vout crosses VDD*output_threshold
*       measure the output slope between VDD*slope_lo and VDD*slope_h and scale to full swing value
*     measure input current for each input transition and convert to capacitance
*     calculate Prop Ramp delays for each input transition from x1, x2 and x3 (normal load cap values)
*     average the power caused by the 2 transitions for each subckt (except one with largest load)
*         and subtract the load power
*   average input pin capacitance over transitions 60ps to 450ps (likeliest transitions)
*   write Prop-Ramp info in VBE file format for Alliance tools
*   write table of delays for each of the 6 load caps and 10 transitions (6x10 LUT)
*   write table of transition times for each of the 6 load caps and 10 transitions (6x10 LUT)
* write power LUT for each of 5 load caps and 10 transitions (5x10 LUT)
* write cap1 file with input pin capacitance
*
.include ../../subckt/vxlib013/spice_model.lib
.include ../../subckt/vxlib013/nd2ab_x1.spi
.include ../../subckt/vxlib013/params.inc
*
x0  a  b    vdd  vss   x0z  nd2ab_x1
x1  a  b    vdd1 vss1  x1z  nd2ab_x1
x2  a  b    vdd2 vss2  x2z  nd2ab_x1
x3  a  b    vdd3 vss3  x3z  nd2ab_x1
x4  a  b    vdd4 vss4  x4z  nd2ab_x1
x5  a  b    vdd5 vss5  x5z  nd2ab_x1
*
cx0z  x0z  0 0
cx1z  x1z  0 0
cx2z  x2z  0 0
cx3z  x3z  0 0
cx4z  x4z  0 0
cx5z  x5z  0 0
* 
vdd  vdd  0 'vdd'
vdd1 vdd1 0 'vdd'
vdd2 vdd2 0 'vdd'
vdd3 vdd3 0 'vdd'
vdd4 vdd4 0 'vdd'
vdd5 vdd5 0 'vdd'
vss  0 vss  'vss'
vss1 0 vss1 'vss'
vss2 0 vss2 'vss'
vss3 0 vss3 'vss'
vss4 0 vss4 'vss'
vss5 0 vss5 'vss'
*
Vref ref 0 dc 0 pwl(0 0 100p 0 )
Va   a   0 dc 0 pwl(0 0 100p 0 )
Vb   b   0 dc 0 pwl(0 0 100p 0 )
*

.control
  set width=136 height=500 numdgt=3 noprintscale nobreak noaskquit=1

  set unitcap=2.6f
  set loadcap0=1
  set loadcap1=4
  set loadcap2=12
  set loadcap3=30
  set loadcap4=62
  set loadcap5=130
  set drive_strength = 1
  set input_threshold_rise = 0.5
  set input_threshold_fall = 0.5
  set output_threshold_rise = 0.5
  set output_threshold_fall = 0.5
  set lower_rise = 0.150
  set upper_rise = 0.850
  set lower_fall = 0.100
  set upper_fall = 0.900

  foreach n 0 1 2 3 4 5 6 7 8 9
    let pvdd0[ $n ] = 0
    let pvdd1[ $n ] = 0
    let pvdd2[ $n ] = 0
    let pvdd3[ $n ] = 0
    let pvdd4[ $n ] = 0
  end
  alter cx0z = $loadcap0 *$unitcap *$drive_strength
  alter cx1z = $loadcap1 *$unitcap *$drive_strength
  alter cx2z = $loadcap2 *$unitcap *$drive_strength
  alter cx3z = $loadcap3 *$unitcap *$drive_strength
  alter cx4z = $loadcap4 *$unitcap *$drive_strength
  alter cx5z = $loadcap5 *$unitcap *$drive_strength
  let sumx =  @cx1z[capacitance] + @cx2z[capacitance] + @cx3z[capacitance]
  let sumx2 = @cx1z[capacitance]^2 + @cx2z[capacitance]^2 + @cx3z[capacitance]^2
  let in_cap = 0
  let ave_cap[1] = 0
  let tPlh_z = 0
  let tPhl_z = 0
  let tPhh_z = 0
  let tPll_z = 0
  let rup_z = 0
  let rdown_z = 0
  let simulation_no = 0
  let pwr_simulation_no = 0
  foreach timing_sense 1 0
  if $timing_sense=-1
    set power_type=n
  end
  if $timing_sense=1
    set power_type=p
  end
  if $timing_sense=0
    set power_type=u
  end
  foreach output_file 1 2
    let num_pin_states = 0
    if $timing_sense < 0
      let pin_state[0]=-1
      let pin_state[1]=-1
      let pin_state[2]=-1
      let pin_state[3]=-1
      let pin_state[4]=-1
      let pin_state[5]=-1
      let pin_state[6]=-1
      let pin_state[7]=-1
      if ( pin_state[ 0 ] = -1 )
        echo "# ? Cell has timing_sense negative_unate but other pin states have not been set."
      end
    end
    if $timing_sense > 0
      let pin_state[0]=0
      let pin_state[1]=-1
      let pin_state[2]=-1
      let pin_state[3]=-1
      let pin_state[4]=-1
      let pin_state[5]=-1
      let pin_state[6]=-1
      let pin_state[7]=-1
      if ( pin_state[ 0 ] = -1 )
        echo "# ? Cell has timing_sense positive_unate but other pin states have not been set."
      end
    end
    if $timing_sense = 0
      let pin_state[0]=1
      let pin_state[1]=-1
      let pin_state[2]=-1
      let pin_state[3]=-1
      let pin_state[4]=-1
      let pin_state[5]=-1
      let pin_state[6]=-1
      let pin_state[7]=-1
      if ( pin_state[ 0 ] = -1 )
        echo "# ? Cell has pin_power condition, but other pin states have not been set."
      end
    end
    let pin_state_index = 0
    while pin_state_index <= 7
      if ( pin_state[ pin_state_index ] = 0 )
        set other_pin_state=0
      else
        if ( pin_state[ pin_state_index ] = 1 )
          set other_pin_state=1
        end
      end
      if ( pin_state[ pin_state_index ] < 0 )
        set other_pin_state=-1
      else
        if $timing_sense = 0
          let pwr_simulation_no = pwr_simulation_no + 1
        else
          let simulation_no = simulation_no + 1
        end
        let num_pin_states = num_pin_states + 1
        let tP0[1] = 0
        let tP1[1] = 0
        let tP2[1] = 0
        let tP3[1] = 0
        let tP4[1] = 0
        let tP5[1] = 0
        let tR0[1] = 0
        let tR1[1] = 0
        let tR2[1] = 0
        let tR3[1] = 0
        let tR4[1] = 0
        let tR5[1] = 0
        let prop_z[1] = 0
        let ramp_z[1] = 0
        if $output_file = 1
          set outfall = -1
          set outhresh=$output_threshold_rise
          set slope1 = $lower_rise
          set slope2 = $upper_rise
          set tstop = 4000p
          if $timing_sense <= 0
            set infall = 1
            set b_v1 = $vdd
            set b_v2 = $vss
            set inthresh=1-$input_threshold_fall
          else
            if $timing_sense > 0
              set infall = -1
              set b_v1 = $vss
              set b_v2 = $vdd
              set inthresh=$input_threshold_rise
            else
              echo "# Timing sense must be positive_unate, negative_unate or pin_power and isn't. Try again."
              break
            end
          end
        end
        if $output_file = 2
          set outfall = 1
          set outhresh=$output_threshold_fall
          set slope1 = $upper_fall
          set slope2 = $lower_fall
          set tstop = 4000p
          if $timing_sense <= 0
            set infall = -1
            set b_v1 = $vss
            set b_v2 = $vdd
            set inthresh=$input_threshold_rise
          else
            if $timing_sense > 0
              set infall = 1
              set b_v1 = $vdd
              set b_v2 = $vss
              set inthresh=1-$input_threshold_fall
            else
              echo "# Timing sense must be positive_unate, negative_unate or pin_power and isn't. Try again."
              break
            end
          end
        end
        if pin_state[ pin_state_index ] = 0
          set a_v1 = $vss
          set a_v2 = $vss
          set tstop = 4000p
        else
          if pin_state[ pin_state_index ] = 1
            set a_v1 = $vdd
            set a_v2 = $vdd
          end
        end
    let n = 0
    foreach transition 20p 60p 90p 130p 200p 300p 450p 670p 1000p 1500p
      let intran[n] = $transition
      alter @Vref[pwl] =[ 0 $vdd $transition $vss ]
      alter @Va[pwl] =[ 0 $a_v1 $transition $a_v2 ]
      alter @Vb[pwl] =[ 0 $b_v1 $transition $b_v2 ]
      tran $tstep $tstop
      linearize
      let simtime = time[length(time)-1]
*      plot v(b) v(x0z) v(x1z) v(x2z) v(x3z) v(x4z) v(x5z)
      if ( $timing_sense < 0 | $timing_sense > 0 )
      let simpoints = length(time)-1
      let m = simpoints/2
      let k = 2
      repeat 16
        k = k * 2
        if ref[m] <= vdd[m]*$inthresh
          if ref[m-1] <= vdd[m-1]*$inthresh
            let m = m - simpoints/k
          else
            let tP = time[m-1]+(vdd[m]*$inthresh -ref[m-1])/(ref[m]-ref[m-1])*(time[m]-time[m-1])
            goto found_tp
          end
        else
          let m = m + simpoints/k
          if m >= simpoints
            goto notfound_tp
          end
        end
      end *repeat 16
      label notfound_tp
      echo # Error: Couldn't calculate tP ... setting to zero
      echo # Error: Couldn't calculate tP ... setting to zero > nd2ab_x1_b.error
      let tP = 0
      label found_tp
*     measure delay from tP to the nets x0z-x5z
      let j = 0
      while j <= 5
        let m = simpoints/2
        let k = 2
        repeat 16
          k = k * 2
          if j=0
            let lower_v = x0z[m-1]
            let upper_v = x0z[m]
          end
          if j=1
            let lower_v = x1z[m-1]
            let upper_v = x1z[m]
          end
          if j=2
            let lower_v = x2z[m-1]
            let upper_v = x2z[m]
          end
          if j=3
            let lower_v = x3z[m-1]
            let upper_v = x3z[m]
          end
          if j=4
            let lower_v = x4z[m-1]
            let upper_v = x4z[m]
          end
          if j=5
            let lower_v = x5z[m-1]
            let upper_v = x5z[m]
          end
          if $outfall * ( upper_v - vdd[m]*$outhresh ) <= 0
            if $outfall * ( lower_v - vdd[m-1]*$outhresh ) <= 0
              let m = m - simpoints/k
            else
              goto found_m
            end
          else
            let m = m + simpoints/k
            if m >= simpoints
              goto notfound_m
            end
          end
        end *repeat 16
        label notfound_m
        echo #Error: Failed to find output threshold ... setting m=simpoints/2
        echo #Error: Failed to find output threshold ... setting m=simpoints/2 >> nd2ab_x1_b.error
        let m = m - simpoints/2
        label found_m
        let out_v = time[m-1]+(vdd[m]*$outhresh -lower_v)/(upper_v-lower_v)*(time[m]-time[m-1])-tP
*       measure the time from slope1 to slope2 of x0x-x5z
        let q = 1
        foreach threshold $slope1 $slope2
          let m = simpoints/2
          let k = 2
          repeat 16
            k = k * 2
            if j=0
              let lower_v = x0z[m-1]
              let upper_v = x0z[m]
            end
            if j=1
              let lower_v = x1z[m-1]
              let upper_v = x1z[m]
            end
            if j=2
              let lower_v = x2z[m-1]
              let upper_v = x2z[m]
            end
            if j=3
              let lower_v = x3z[m-1]
              let upper_v = x3z[m]
            end
            if j=4
              let lower_v = x4z[m-1]
              let upper_v = x4z[m]
            end
            if j=5
              let lower_v = x5z[m-1]
              let upper_v = x5z[m]
            end
            if $outfall * ( upper_v - vdd[m]*$threshold ) <= 0
              if $outfall * ( lower_v - vdd[m-1]*$threshold ) <= 0
                let m = m - simpoints/k
              else
                goto found_slope
              end
            else
              let m = m + simpoints/k
              if m >= simpoints
                goto notfound_slope
              end
            end 
          end *repeat 16
          label notfound_slope
          echo #Error: Failed to find slope ... setting m=simpoints/2
          echo #Error: Failed to find slope ... setting m=simpoints/2 >> nd2ab_x1_b.error
          let m = simpoints/2
          label found_slope
          if q=1
            let out_slope1 = time[m-1]+(vdd[m]*$threshold -lower_v)/(upper_v-lower_v)*(time[m]-time[m-1])
          end
          if q=2
            let out_slope2 = time[m-1]+(vdd[m]*$threshold -lower_v)/(upper_v-lower_v)*(time[m]-time[m-1])
            let out_slope = out_slope2-out_slope1
          end
          let q = q+1
        end *foreach threshold $slope1 $slope2
        if j=0
          let tP0[n] = out_v
          let tR0[n] = abs(out_slope/( $slope1 - $slope2 ))
        end
        if j=1
          let tP1[n] = out_v
          let tR1[n] = abs(out_slope/( $slope1 - $slope2 ))
        end
        if j=2
          let tP2[n] = out_v
          let tR2[n] = abs(out_slope/( $slope1 - $slope2 ))
        end
        if j=3
          let tP3[n] = out_v
          let tR3[n] = abs(out_slope/( $slope1 - $slope2 ))
        end
        if j=4
          let tP4[n] = out_v
          let tR4[n] = abs(out_slope/( $slope1 - $slope2 ))
        end
        if j=5
          let tP5[n] = out_v
          let tR5[n] = abs(out_slope/( $slope1 - $slope2 ))
        end
        let j = j+1
      end *while j <= 5

      let ave_current = mean(vb#branch)
*     ave_current is current into 6 instances; ave_cap is capacitance averaged per instance
      let ave_cap[n] = abs(( ave_current * simtime/$vdd )/6 )
*     Calculate Prop and Ramp delays using all load caps
*     between the second and fourth using the method of least squares.
      let sumxy = @cx1z[capacitance]*tP1[n]+@cx2z[capacitance]*tP2[n]+@cx3z[capacitance]*tP3[n]
      let sumy = tP1[n]+tP2[n]+tP3[n]
      let ramp_z[n] = (3*sumxy-sumx*sumy)/(3*sumx2-sumx^2)
      let prop_z[n]= (sumy*sumx2-sumx*sumxy)/(3*sumx2-sumx^2)
      let pvdd0[n] = (( -mean(vdd#branch) -mean(vss#branch))*$tstop /$vdd - $loadcap0 *$unitcap *$drive_strength )*$vdd *$vdd /simulation_no + pvdd0[n] *( simulation_no -1)/simulation_no
      let pvdd1[n] = (( -mean(vdd1#branch) -mean(vss1#branch))*$tstop /$vdd - $loadcap1 *$unitcap *$drive_strength )*$vdd *$vdd /simulation_no + pvdd1[n] *( simulation_no -1)/simulation_no
      let pvdd2[n] = (( -mean(vdd2#branch) -mean(vss2#branch))*$tstop /$vdd - $loadcap2 *$unitcap *$drive_strength )*$vdd *$vdd /simulation_no + pvdd2[n] *( simulation_no -1)/simulation_no
      let pvdd3[n] = (( -mean(vdd3#branch) -mean(vss3#branch))*$tstop /$vdd - $loadcap3 *$unitcap *$drive_strength )*$vdd *$vdd /simulation_no + pvdd3[n] *( simulation_no -1)/simulation_no
      let pvdd4[n] = (( -mean(vdd4#branch) -mean(vss4#branch))*$tstop /$vdd - $loadcap4 *$unitcap *$drive_strength )*$vdd *$vdd /simulation_no + pvdd4[n] *( simulation_no -1)/simulation_no
      end *if ( $timing_sense < 0 | $timing_sense > 0 )
      if $timing_sense = 0
      let pvdd0[n] = (( -mean(vdd#branch) -mean(vss#branch))*$tstop /$vdd )*$vdd *$vdd /pwr_simulation_no + pvdd0[n] *( pwr_simulation_no -1)/pwr_simulation_no
      let pvdd1[n] = (( -mean(vdd1#branch) -mean(vss1#branch))*$tstop /$vdd )*$vdd *$vdd /pwr_simulation_no + pvdd1[n] *( pwr_simulation_no -1)/pwr_simulation_no
      let pvdd2[n] = (( -mean(vdd2#branch) -mean(vss2#branch))*$tstop /$vdd )*$vdd *$vdd /pwr_simulation_no + pvdd2[n] *( pwr_simulation_no -1)/pwr_simulation_no
      let pvdd3[n] = (( -mean(vdd3#branch) -mean(vss3#branch))*$tstop /$vdd )*$vdd *$vdd /pwr_simulation_no + pvdd3[n] *( pwr_simulation_no -1)/pwr_simulation_no
      let pvdd4[n] = (( -mean(vdd4#branch) -mean(vss4#branch))*$tstop /$vdd )*$vdd *$vdd /pwr_simulation_no + pvdd4[n] *( pwr_simulation_no -1)/pwr_simulation_no
      end
      let n = n + 1
      destroy all
    end *foreach transition

*       Only consider caps from the likeliest input transitions ... 2nd to 7th chosen here ... and sims which change the output value
*       in_cap expression changes depending on number of simulations run for this function
        let in_cap = in_cap*(simulation_no -1)/(simulation_no ) + ( ave_cap[1]+ave_cap[2]+ave_cap[3]+ave_cap[4]+ave_cap[5]+ave_cap[6] )/6/(simulation_no )
        if $timing_sense < 0
*         For input falling, use transition=130ps for prop-ramp calculation
          if $output_file = 1
            print col intran tP0 tP1 tP2 tP3 tP4 tP5 > nd2ab_x1_b_{$other_pin_state}_lh.delay
            print col intran tR0 tR1 tR2 tR3 tR4 tR5 > nd2ab_x1_b_{$other_pin_state}_lh.ramp
            print col intran prop_z ramp_z ave_cap > nd2ab_x1_b_{$other_pin_state}_lh.vbe
            let tPlh_z = tPlh_z + prop_z[3]
            let rup_z = rup_z + ramp_z[3]
          end
*         For input rising, use transition=130ps for prop-ramp calculation
          if $output_file = 2
            print col intran tP0 tP1 tP2 tP3 tP4 tP5 > nd2ab_x1_b_{$other_pin_state}_hl.delay
            print col intran tR0 tR1 tR2 tR3 tR4 tR5 > nd2ab_x1_b_{$other_pin_state}_hl.ramp
            print col intran prop_z ramp_z ave_cap > nd2ab_x1_b_{$other_pin_state}_hl.vbe
            let tPhl_z = tPhl_z + prop_z[3]
            let rdown_z = rdown_z + ramp_z[3]
          end
        end
        if $timing_sense > 0
*         For input rising, use transition=130ps for prop-ramp calculation
          if $output_file = 1
            print col intran tP0 tP1 tP2 tP3 tP4 tP5 > nd2ab_x1_b_{$other_pin_state}_hh.delay
            print col intran tR0 tR1 tR2 tR3 tR4 tR5 > nd2ab_x1_b_{$other_pin_state}_hh.ramp
            print col intran prop_z ramp_z ave_cap > nd2ab_x1_b_{$other_pin_state}_hh.vbe
            let tPhh_z = tPhh_z + prop_z[3]
            let rup_z = rup_z + ramp_z[3]
          end
*         For input falling, use transition=130ps for prop-ramp calculation
          if $output_file = 2
            print col intran tP0 tP1 tP2 tP3 tP4 tP5 > nd2ab_x1_b_{$other_pin_state}_ll.delay
            print col intran tR0 tR1 tR2 tR3 tR4 tR5 > nd2ab_x1_b_{$other_pin_state}_ll.ramp
            print col intran prop_z ramp_z ave_cap > nd2ab_x1_b_{$other_pin_state}_ll.vbe
            let tPll_z = tPll_z + prop_z[3]
            let rdown_z = rdown_z + ramp_z[3]
          end
        end
*        plot tP0 tP1 tP2 tP3 tP4 tP5 vs intran
        if $other_pin_state ne -1
          if $timing_sense < 0
            if $output_file = 1
              let tPlh_z = tPlh_z / num_pin_states
              let rup_z = rup_z / num_pin_states
              print tPlh_z rup_z in_cap
            end
            if $output_file = 2
              let tPhl_z = tPhl_z / num_pin_states
              let rdown_z = rdown_z / num_pin_states
              print tPhl_z rdown_z in_cap
            end
          end
          if $timing_sense > 0
            if $output_file = 1
              let tPhh_z = tPhh_z / num_pin_states
              let rup_z = rup_z / num_pin_states
              print tPhh_z rup_z in_cap
            end
            if $output_file = 2
              let tPll_z = tPll_z / num_pin_states
              let rdown_z = rdown_z / num_pin_states
              print tPll_z rdown_z in_cap
            end
          end
        end
      end *if ( pin_state[ pin_state_index ] < 0 )
      let pin_state_index = pin_state_index + 1
    end *while pin_state_index
  end *foreach output_file
  print col pvdd0 pvdd1 pvdd2 pvdd3 pvdd4 > nd2ab_x1_b_{$power_type}.power
  end *foreach timing_sense
  rusage trantime
.endc
.end
